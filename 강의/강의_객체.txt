객체 - Object - 사물

객체간의 '상호작용'

객체는 특성과 행위로 구성된다.


상호작용 >> 속성 + 행위(메서드)

    - 특성 : 속성, 변수
    - 행위: 함수, 메서드

객체 : 속성, 메서드로 구성되어 있는 자료형

자바스크립트에서 객체를 정의하는 방법
중괄호 {}로 객체를 정의

{
    속성 : 값,
    속성 : 값,
};

값 - 숫자, 문자, ... .. 함수

객체의 속성에 접근하는 연산자
    - 마침표 연산자 (.)
    - 객체를 담은 변수명. 속성명
     ex) person.age
    - 대괄호[]
        객체 변수명['속성명']

    - 속성을 변경
        이미 존재하는 속성에 값을 대입
        person.age = 50; // 변경

    - 속성을 추가
        아직 존재하지 않는 속성에 값을 대입
        person.school = "연희 직업 전문학교";

    참고) 존재하지 않는 속성에 접근 -> undefined 값이 기본값으로 나온다.
                                        (속성명은 변수의 속성과 동일)

    - 속성을 삭제
        delete 연산자
        delete 객체변수.속성명;

생성자
    - 객체를 생성하는 역할
    - 객체를 정의하는 틀
    
    function 생성자명(인수...인수...) {
        this.속성명 = 값(원시타입 + 객체);
        ..
        ..
        this.속성명 = 값  << 여기서 this는 생성할 객체가 있다고 가정함.
    }

    - 생성자의 인수 - (속성명 값을) 초기화 역할
    - 객체를 생성하려면... new 연산자 필요

    
    
    this > 생성된 인스턴스의 주소를 내부에서 가리키는 연산자

메모리
    - 데이터영역: 작성한 코드
    - 스택 영역 : 함수가 호출될때 실행되는 메모리 영역
    - 힙영역 : 인스턴스가 생성되는 메모리 영역

    - prototype
        .constructor : 생성자 원본 -> new 연산자 가능.
        .[[prototype]] : 상속관계 << 데이터영역 : 메모리를 효율적으로 사용할 수 잇다.

    - { ... } : 이미 생성되있는 객체( new Object() )
    - 생성자명 -> 앞글자가 대문자인 파스칼 케이스
    - 일반 함수명 -> 앞글자 소문자, 각 단어 시작마다 대문자 - 카멜케이스


참고) 브라우저 객체모델 : 브라우저에만 있는 객체(기능모듈)
    window
        -document: html 문서를 다루는 객체
        -screen: 브라우저 화면을
        -location: 브라우저 URL을 다루는 객체
        -history: 브라우저의 방문 기록을 다루는 객체
        -navigator: 현재 브라우저가 실행되고 있는 환경에 대한 객체

    window.console


