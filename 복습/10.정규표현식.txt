정규표현식
  RegExp 생성자
    /패턴/ -> new RegExp(...) RegExp 인스턴스
      RegExp.prototype
        .test(패턴) -> 패턴의 일치 여부(true|false)
        .exec(패턴) -> 패턴에 일치하는 문자열 정보

      예제
        const a = "absdfasdfwersdf"
          undefined
        /ab/.test(a);
          true
        /ab/.exec(a);
          ['ab', index: 0, input: 'absdfasdfwersdf', groups: undefined]
      
    /abc/ -> abc라는 문자열이 포함되어 있는지 여부
    [] -> 문자클래스 -> 각각의 문자
    [ab] -> a 또는 b 또는 c 가 포함되어 있는지
    [012345] -> 0,1,2,3,4,5 가 포함되어 있는지
    /01234/ -> 01234가 포함
    [^abc] -> a,b,c,가 아닌 문자
    /^abc/ -> abc로 시작하는 문자
    /abc$/ -> abc로 끝나는 문자 패턴

    .-> (줄개행 문자 \n를 제외한 )모든 문자 한개, ... -> 모든 문자 3개

    /[0-9]/ -> 숫자 매칭 패턴 \d -> /[\d]/
    /[^0-9]/ -> 숫자가 아닌 패턴 -- \D -> /[\D]/

    \s -> 공백
    \S -> 공백이 아닌 문자

    \w -> 알파벳,숫자,_(언더스코어) 한개
    \W -> 알파벳,숫자,_(언더스코어)를 제외한 모든 문자.

    {}-> 반복 범위
    문자{시작, 종료}
    문자{2,5} -> 문자가 2이상 5이하 반복
    문자{2,} -> 문자가 2 이상 반복
    문자 {,5} -> 문자가 5 이하 반복
    문자{숫자} -> 문자가 숫자만큼 반복 
      문자{3} -> 문자 패턴이 3만큼 반복

        휴대폰번호 패턴 체크
        const patter  = /^01[016789]-[\d]{3,4}-[\d]{4}$/;

    문자? -> 문자{0,1} -> 문자를 1번이하 반복(문자가 있어도 되고 없어도 되고)
    문자* -> 문자{0,} -> 문자를 0번 이상 반복(있어도 되고 없어도되고, 여러개도 가능)
    문자+ -> 문자{1,} 문자를 1번 이상 반복(반드시 1개는 있어야 한다.)
    문자1|문자2|문자3 -> 문자1 또는 문자 2 또는 문자3 

    (패턴 ) -> 서브패턴 -> 특정 패턴을 그룹화 해서 추출

    정규표현식 플래그
    i - 대문자와 소문자를 구별하지 않는다
    g - 전역 검색한다. 처음뿐만 아니라 일치하는 모든 것을 검색한다
    m - 여러 줄 모드로 검색한다 

    abc - 문자열을 포함한다
    [abc] - 문자클래스 - 문자집합안에 특정 문자 한개
    [^abc] - 부정문자클래스 : 문자 집합안의 특정 문자 한개
    [a-z] - 두 문자 사이의 모든 문자
    .  - 줄 바꿈 문자를 제외한 문자 한개
    \d - 모든 숫자[0-9]와 같음
    \D - 숫자를 제외한 모든 문자 한개 [^0-9]와 같음
    \w - 임의의 영어 단어 문자(알파벳, 숫자, 언더스코어) 한개
    \W - 영어단어 문자(알파벳, 숫자, 언더스코어)를 제외한 문자 한개
    \s  - 모든 공백 문자 한 개
    \S  - 공백문자가 아닌 문자 한개

    x{2,4} - x를 최소 2번, 최대 4번 반복
    x{2,} - x를 2번 잇ㅇ 반복
    x?  - x를 한번 이하 반복
    x+ - x를 한번 이상 반복
    x* - x를 0번 이상 반복
    (x) - x를 그룹화(부분 정규 표현식)
    ^ - 문자열의 시작 위치 
    $ - 문자열의 마지막 위치
    x|y|z - x,y,z 중 하나(선택)

    정규표현식 플래그
    i - 대문자와 소문자를 구별하지 않는다
    g - 전역 검색한다. 처음뿐만 아니라 일치하는 모든 것을 검색한다
    m - 여러 줄 모드로 검색한다 

    이미지 태그
     a태그 href='경로...'

     <a 속성... href='링크...' class=... id=... 기타 속성 ....>텍스트</a>
     /<a.+href=['"]?([^'">]+)['"]?[^>]*>/igm

     RegExp.prototype.exec 
      -> 매칭된 위치에 정지
      -> 실행을 반복할때마다 다음 패턴 매칭-> 정지 ->반복

      -> 더이상 매칭되는 패턴이 없을 경우-> exec -> null 값 반환
      -> RegExp 인스턴스.lastIndex 번호가 0

    img 태그의 src = "이미지 경로"
    <img 속성... src='이미지경로' 속성... >
    /<img.+src=['"]?([^'">]+)['"]?[^>]*>/igm
    

