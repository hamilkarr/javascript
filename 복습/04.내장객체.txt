Error 생성자 = 보완
  - 상속을 통해서 사용자 정의 에러

String 생성자
  let a = "abc"; // 기본자료형
      a. -> String 생성자에 정의되어 있는 메서드 사용 가능
         -> new String(a) -> 메서드 호출 -> 원래 기본 자료형으로 복구

  String.prototype
    - concat(s1,s2,s3 ... ) -> 문자열 결합
    - endsWith(s) -> s로 문자열이 끝나는지 체크
    - startWith(s) -> s로 문자열이 시작하는지 체크
    - includes(s) -> s가 포함되어 있는지 여부(true,false)
    - indexOf(s) -> s가 왼쪽부터 시작하는 위치, s를 찾지 못하는 경우 -1
    - lastIndexOf(s) -> s가 오른쪽부터 시작하는 위치, s를 찾지 못하는 경우 -1
    - match(regexp 인스턴스) -> 정규표현식 체크
          RegExp -> /표현식/ -> ReqExp 인스턴스
                .test
                .exec
    - matchAll(reqExp 인스턴스)
    - repeat(n) -> 문자열을 n 만큼 반복
    - replace("찾을 문자열", "변경할 문자열") 
      -> 처음 매칭되는 문자열 한 부분만 치환
      -> 전체 치환 -> 정규표현식의 g(global) flag 사용
    - slice() -> 특정 위치 문자열을 저장된 길이만큼 잘라서 반환
    - split(d) -> d 구분값으로 문자열 -> 배열로 변환
        apple, mango, banana -> , -> ["apple","mango","banana"]
          -> 배열을 -> 문자열로 결합
            Array.prototype.join
    - substring(s, e) -> 특정 문자열 위치에서 특정 길이만큼 잘라낼때 사용
      s 이상, e 미만
      substring(1,5) -> 1,2,3,4
    - toLowerCase() -> 문자열을 소문자로 변환
    - toUpperCase() -> 문자열을 대문자로 변환

Array 생성자
  - 자바스크립트에서 배열 -> 배열 객체 -> 유사 배열
  - length -> 요소의 개수

      const a = new Array(); // __proto__ -----> Array.prototype

  - Array.prototype
    .concat(...a); -> 배열 객체의 집합
    .filter(function(el,index),thisArg) { } -> 테스트에 통과한 배열 요소만 반환 )
    .find(function(el,index), thisArg) {} -> 테스트에 통과한 첫번째 요소만 반환
    .forEach(function (el,index,thisArt) {} ) -> 요소를 반복 순회
    .includes(..) -> 특정요소가 포함되어 잇는지 여부 (true|false)
    .indexOf(..) -> 특정 요소를 검색해서 왼쪽 요소가 있는 첫번째 위치의 인덱스 번호를 반환, 못찾으면 -1을 반환
    .lastIndexOf(..) -> 특정 요소를 오른쪽부터 찾아서 인덱스 번호 반환, 못찾으면 -1
    .join(...) 
      -> 배열객체 -> 문자열로 결합 // PHP -> implode()
      -> String.prototype.split(구분값) -> 문자열 -> 배열객체 // PHP -> explode()
    .keys() -> 인덱스 번호 배열
    .map() -> 요소를 변경해서 반환
    .shift() -> 배열의 첫번째 요소를 제거, 제거한 요소를 반환
    .pop() -> 배열의 마지막 요소를 제거, 제거한 요소를 반환
    .push(...a) -> 배열의 마지막 요소에 추가 // PHP -> array_push
    .unshift(...a) -> 배열의 첫번째  요소에 추가
    .reduce(...) -> 배열의 각 요소에 대해 주어진 리듀서(reducer) 함수를 실행하고, 하나의 결과값을 반환합니다.
    .reverse() -> 배열의 순서를 반대로 변경
    .slice() -> 배열을 잘라서 새로운 배열로 반환 (배열을 (깊은)복사할 때...)


  - Array.isArray -> 배열 생성자로부터 생성된 인스턴스인지 체크
      instanceof
      a instanceof Array
  
  Math
    .abs() -> 절대값 음수 -> 양수
    .round() -> 반올림
    .ceil() -> 올림
    .floor() -> 버림

    .max() -> 최대값
    .min() -> 최소값
    .random() 0 이상 1 미만의 수 범위의 난수
    .sign()-> 음수 -> -1, didtn -> 1,0,

  Number
    -> Number(...) -> 문자열이 숫자로 변경.
    .isNaN() -> Not a Number -> 숫자가 아니면 true|false
    .parseFloat() -> 실수로 변경
    .parseInt() -> 정수로 변경
    .toFixed() -> 고정 소수점으로 문자열 숫자 표기
    .toLocaleString()-> 지역(국가)에 맞는 

  Boolean
    -> Boolean(...) -> 문자열을 논리값으로 평가
      false로 인식하는 조건 : 0, "", null, undefined
      false가 아닌 true인 조건 : [], {}
  
  
  Date
    -> 생성자 -> 인스턴스 생성 시점의 날짜와 시간
      생성자 매개변수로 년도,월,일,시,분,초
        -> 문자열 형태의 시간 -> 특정 시간대의 Date 인스턴스가 만들어진다.
        -> Date 인스턴스

    prototype
      .getFullYear() -> 년도 예) 2021
      .getMonth() -> 월 0 ~ 11, 실제 출력시에는 +1 해줘야함.
      .getDate() -> 일 1~31
      .getDay() -> 요일 0~6 // 0 - 일요일, 1 - 월요일 ... 6 - 토요일
      .getMinutes() -> 분
      .getSeconds() -> 초

      .getTime() -> 1970.1.1 자정부터 현재까지 천분의 1초 단위로 카운팅한 정수 // php - time() -> 초단위
      .toLocaleString() -> 지역에 맞는 시간 표기법으로 출력

  .now() == Date.prototype.getTime();

Map : key,value 쌍 (제너레이터)
  new Map(초기값 -> 배열)
  new Map([
    [키,값],
    [키,값],
    ...
  ]);

  prototype
    .size - 요소의 개수
    .set(key,value): // java - put
    .get(key)
    .delete(key); // java - remove
    .has(key); // java - containsKey
    .clear();
    .key() 키값만 가져옴 -> // java - keySet();
    .values() 
    .entries() key, value 쌍으로 조회 // java entrySet() Set<Map.Entry>
    .forEach()
    .for ... of ...

Set : 집합자료형
  new Set(["value1",'value2','value3']);

  .prototype
    .add("value");
    .has("value");
    .delete('value');
    .entries(); - The entries() method returns a new Iterator object that contains an array of [value, value] for each element in the Set

    .forEach - function(value,value,thisArg);
    .values();